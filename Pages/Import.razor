@page "/import"
@inject IJSRuntime JSRuntime
@using BergNotenWASM.Model
@using BergNotenWASM.Test

<div class="d-flex flex-column align-items-center">
    <h3>Importiere Teilnehmerdaten</h3>
    <InputFile OnChange="ReadFileAsync" accept=".xls,.xlsx" class="form-control" />

    @if (data.Count() != 0)
    {
        <table class="table table-striped table-bordered m-4 ">
            <thead>
                <tr>
                    <th scope="col">#</th>
                    <th scope="col">Vorname</th>
                    <th scope="col">Nachname</th>
                    <th scope="col">Geburtsdatum</th>
                    <th scope="col">Verein</th>
                </tr>
            </thead>
            <tbody>
                @for (var i = 0; i < data.Count(); i++)
                {
                    <tr>
                        <th scope="row">@(i+1)</th>
                        <td>
                            @(data[i].Vorname)
                        </td>
                        <td>
                            @(data[i].Nachname)
                        </td>
                        <td>
                            @(data[i].Geburtsdatum.ToString("dd.MM.yyyy"))
                        </td>
                        <td>
                            @(data[i].Verein)
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <p class="p-2">Keine Daten verfügbar.</p>
    }

    @if (showConfirmation)
    {
        <div class="modal" style="display:block;">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Bestätigung</h5>
                        <button type="button" class="btn btn-close" @onclick="ClosePopup"></button>
                    </div>
                    <div class="modal-body">
                        <p>Möchten Sie den Download wirklich starten?</p>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-primary" @onclick="ConfirmDownload">Ja</button>
                        <button class="btn btn-secondary" @onclick="ClosePopup">Nein</button>
                    </div>
                </div>
            </div>
        </div>
    }

    <input type="button" class="btn btn-primary m-4" value="Speichern" @onclick="OpenConfirmationPopup" />
</div>



@code {
    private List<Teilnehmer> data = [];
    private int RowIndex = 0;
    private bool showConfirmation = false;

    private async Task ReadFileAsync(InputFileChangeEventArgs e)
    {
        var file = e.File; // Die ausgewählte Datei
        using var stream = file.OpenReadStream(maxAllowedSize: 1024 * 1024 * 10); // Max 10 MB

        // Kopiere den Inhalt des Streams in einen MemoryStream
        using var memoryStream = new MemoryStream();
        await stream.CopyToAsync(memoryStream); // Asynchrones Kopieren des Streams
        memoryStream.Position = 0; // Setze die Position des MemoryStreams zurück


        var extension = e.File.Name.Split('.')[1];
        data = ExcelIO.Import<Teilnehmer>(memoryStream, extension).ToList(); // Übergib den MemoryStream an NPOI
        if (data == null)
        {
            Console.WriteLine("Keine Daten gealden");
        }
        else
        {
            Console.WriteLine(data.Count());
        }
        StateHasChanged(); // UI neu rendern

        //TODO Erst mal einen Test Export einer Muster Excel erstellen und dann den Import regeln!
    }


    private async Task DownloadAsync()
    {
            // Erzeuge den MemoryStream
            var ms = ExcelIO.Export<Teilnehmer>(TestDownloadData.TestTeilnehmer);

            if (ms.CanSeek)
            {
                Console.WriteLine($"In Import ist der Stream noch nicht geschlossen.");
            }
            else
            {
                Console.WriteLine($"In Import ist der Stream geschlossen.");
            }
           
            var fileBytes = ms.ToArray();

            // Erstelle die Datei über JavaScript
            var fileUrl = await JSRuntime.InvokeAsync<string>("createObjectURL", fileBytes, "download.txt");

            // Lade die Datei herunter
            await JSRuntime.InvokeVoidAsync("downloadFile", fileUrl, "download.xlsx");
        
    }

    private void OpenConfirmationPopup()
    {
        showConfirmation = true;
    }

    private void ClosePopup()
    {
        showConfirmation = false;
    }

    private async Task ConfirmDownload()
    {
        showConfirmation = false;
        // Starte den Download, nachdem die Bestätigung erfolgt ist
        await DownloadAsync();
    }

}

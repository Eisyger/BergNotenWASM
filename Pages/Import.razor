@page "/import"
@inject IJSRuntime JsRuntime
@using BergNotenWASM.Model
@using BergNotenWASM.Test
@using NPOI.XSSF.UserModel

<div class="d-flex flex-column align-items-center">
    <h3>Importiere Teilnehmerdaten</h3>
    <InputFile OnChange="ReadFileAsync" accept=".xls,.xlsx" class="form-control" />

    @if (_teilnehmerData.Count() != 0)
    {
        <table class="table table-striped table-bordered m-4 ">
            <thead>
            <tr>
                <th scope="col">#</th>
                <th scope="col">Vorname</th>
                <th scope="col">Nachname</th>
                <th scope="col">Geburtsdatum</th>
                <th scope="col">Verein</th>
            </tr>
            </thead>
            <tbody>
            @for (var i = 0; i < _teilnehmerData.Count(); i++)
            {
                <tr>
                    <th scope="row">@(i + 1)</th>
                    <td>
                        @(_teilnehmerData[i].Vorname)
                    </td>
                    <td>
                        @(_teilnehmerData[i].Nachname)
                    </td>
                    <td>
                        @(_teilnehmerData[i].Geburtsdatum.ToString("dd.MM.yyyy"))
                    </td>
                    <td>
                        @(_teilnehmerData[i].Verein)
                    </td>
                </tr>
            }
            </tbody>
        </table>
    }
    @if (_pruefungsData.Count() != 0)
    {
    <table class="table table-striped table-bordered m-4 ">
            <thead>
            <tr>
                <th scope="col">#</th>
                <th scope="col">Name</th>
                <th scope="col">Beschreibung</th>
            </tr>
            </thead>
            <tbody>
            @for (var i = 0; i < _pruefungsData.Count(); i++)
            {
                <tr>
                    <th scope="row">@(i+1)</th>
                    <td>
                        @(_pruefungsData[i].Name)
                    </td>
                    <td>
                        @(_pruefungsData[i].Beschreibung)
                    </td>
                </tr>
            }
            </tbody>
        </table>
    }
    else
    {
        <p class="p-2">Keine Daten verfügbar.</p>
    }

    @if (_showConfirmation)
    {
        <div class="modal" style="display:block;">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Bestätigung</h5>
                        <button type="button" class="btn btn-close" @onclick="ClosePopup"></button>
                    </div>
                    <div class="modal-body">
                        <p>Möchten Sie den Download wirklich starten?</p>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-primary" @onclick="ConfirmDownload">Ja</button>
                        <button class="btn btn-secondary" @onclick="ClosePopup">Nein</button>
                    </div>
                </div>
            </div>
        </div>
    }

    <input type="button" class="btn btn-primary m-4" value="Download Testdaten" @onclick="OpenConfirmationPopup" />
</div>



@code {
    private List<Teilnehmer> _teilnehmerData = [];
    private List<Pruefungen> _pruefungsData = [];
    private bool _showConfirmation;

    #region LoadData
    private async Task ReadFileAsync(InputFileChangeEventArgs e)
    {
        var file = e.File; // Die ausgewählte Datei
        await using var stream = file.OpenReadStream(maxAllowedSize: 1024 * 1024 * 10); // Max 10 MB

        // Kopiere den Inhalt des Streams in ein Byte-Array
        var data = new byte[stream.Length];
        @(await stream.ReadAsync(data.AsMemory(0, (int)stream.Length)))

        var extension = e.File.Name.Split('.')[1];

        // Erstelle zwei separate MemoryStreams aus dem Byte-Array
        // NPOI schließt den Stream, daher muss jedes Mal, wenn aus einem Stream ein Workbook erstellt wird
        // ein neuer Stream erstellt werden.
        using var memoryStream1 = new MemoryStream(data);
        using var memoryStream2 = new MemoryStream(data);

        // Setze die Position der MemoryStreams zurück
        memoryStream1.Position = 0; 
        memoryStream2.Position = 0; 

        // Importiere die Daten für Teilnehmer
        _teilnehmerData = ExcelIO.Import<Teilnehmer>(memoryStream1, extension).ToList();
    
        // Importiere die Daten für Prüfungen
        _pruefungsData = ExcelIO.Import<Pruefungen>(memoryStream2, extension).ToList();

        Console.WriteLine(_teilnehmerData.Count());
        Console.WriteLine(_pruefungsData.Count());
    
        StateHasChanged(); // UI neu rendern
    }

    #endregion

    #region DownloadData
    private async Task DownloadAsync()
    {
        var builder = new ExcelIO.WoorkbookBuilder();
        builder.SetData(TestDownloadData.TestTeilnehmer, nameof(Teilnehmer));
        builder.SetData(TestDownloadData.TestPruefungen, nameof(Pruefungen));
        builder.SetDateTimeFormat("dd-MM-yyyy");
        
        // Erzeuge den MemoryStream
        var ms = ExcelIO.ExportWorkbook(builder.Build(new XSSFWorkbook()));
        
        Console.WriteLine(ms.CanSeek 
            ? $"In Import ist der Stream noch nicht geschlossen." 
            : $"In Import ist der Stream geschlossen.");

        var fileBytes = ms.ToArray();

        // Erstelle die Datei über JavaScript
        var fileUrl = await JsRuntime.InvokeAsync<string>("createObjectURL", fileBytes, "download.txt");

        // Lade die Datei herunter
        await JsRuntime.InvokeVoidAsync("downloadFile", fileUrl, "download.xlsx");
        
    }

    private void OpenConfirmationPopup()
    {
        _showConfirmation = true;
    }

    private void ClosePopup()
    {
        _showConfirmation = false;
    }

    private async Task ConfirmDownload()
    {
        _showConfirmation = false;
        // Starte den Download, nachdem die Bestätigung erfolgt ist
        await DownloadAsync();
    }
    #endregion

}
